#include <iostream>
#include <cmath>
#include <cstdlib>
#include <vector>
#include <ctime>

using namespace std;

// Function to find gcd
int gcd(int a, int b) {
    while (b != 0) {
        int t = b;
        b = a % b;
        a = t;
    }
    return a;
}

// Function to perform the extended Euclidean algorithm to find the modular inverse
int modInverse(int e, int phi) {
    int t = 0, newT = 1;
    int r = phi, newR = e;

    while (newR != 0) {
        int quotient = r / newR;
        int tempT = t;
        t = newT;
        newT = tempT - quotient * newT;

        int tempR = r;
        r = newR;
        newR = tempR - quotient * newR;
    }

    if (r > 1) return -1; // e is not invertible
    if (t < 0) t += phi;

    return t;
}
// Function to generate prime numbers up to a given range using the Sieve of Eratosthenes
vector<int> generatePrimes(int range) {
    vector<bool> isPrime(range + 1, true);
    vector<int> primes;

    isPrime[0] = isPrime[1] = false;
    for (int i = 2; i * i <= range; ++i) {
        if (isPrime[i]) {
            for (int j = i * i; j <= range; j += i) {
                isPrime[j] = false;
            }
        }
    }

    for (int i = 2; i <= range; ++i) {
        if (isPrime[i]) {
            primes.push_back(i);
        }
    }

    return primes;
}

// Function to perform modular exponentiation
int modExp(int base, int exp, int mod) {
    int result = 1;
    base = base % mod;
    while (exp > 0) {
        if (exp % 2 == 1) {
            result = (result * base) % mod;
        }
        exp = exp >> 1;
        base = (base * base) % mod;
    }
    return result;
}

int main() {
    srand(time(0));
    
    int range;
    cout << "Please enter the number till which you want prime numbers: ";
    cin >> range;
    cout << "\n";

    vector<int> primes = generatePrimes(range);
    
    if (primes.size() < 2) {
        cout << "Not enough primes found in the given range.\n";
        return 1;
    }

    int p = primes[rand() % primes.size()];
    int q;
    do {
        q = primes[rand() % primes.size()];
    } while (q == p);

    // Calculate n
    int n = p * q;
    // Calculate phi
    int phi = (p - 1) * (q - 1);

    // Public key
    int e = 3;
    while (gcd(e, phi) != 1) {
        e++;
    }

    // Private key
    int d = modInverse(e, phi);
    if (d == -1) {
        cout << "Error calculating the modular inverse.\n";
        return 1;
    }

    // Message input
    int plaintext;
    cout << "Please enter the number you want to encrypt: ";
    cin >> plaintext;
    cout << "\n";

    // Encrypt the message
    int c = modExp(plaintext, e, n);

    // Decrypt the message
    int m = modExp(c, d, n);

    // Display results
    cout << "The range in which prime numbers should be is from 1 to " << range << "\n";
    cout << "Original number: " << plaintext << "\n";
    cout << "p = " << p << "\n";
    cout << "q = " << q << "\n";
    cout << "n = pq = " << n << "\n";
    cout << "phi = " << phi << "\n";
    cout << "e = " << e << "\n";
    cout << "d = " << d << "\n";
    cout << "Public Key is {" << e << ", " << n << "}\n";
    cout << "Private Key is {" << d << ", " << n << "}\n";
    cout << "Encrypted message: " << c << "\n";
    cout << "Decrypted message: " << m << "\n";

    return 0;
}
